@*@model IEnumerable<BookStore.Entities.Book>*@

@model PagedList.IPagedList<BookStore.Entities.Book>

@using PagedList.Mvc;
@{
    ViewBag.Title = "Index";
}

<link href="~/Content/PagedList.css" rel="stylesheet" />

<h2>Book</h2>

<p>
    @Html.ActionLink("Create Book", "Create")  | @Html.ActionLink("Create Author", "Index", "Authors")  |  @Html.ActionLink("Create Country", "Index", "CountryPublisheds")
</p>
<p></p>

<div class="container">
    <h3>The columns titles are merged with the filters inputs thanks to the placeholders attributes</h3>
    <hr>
    <p>Inspired by this <a href="http://bootsnipp.com/snippets/featured/panel-tables-with-filter">snippet</a></p>
    <div class="row">
        <div class="panel panel-primary filterable">
            <div class="panel-heading text-center">
                <h3 class="panel-title">Books list</h3>
                <div class="pull-right">
                    <button class="btn btn-default btn-xs btn-filter"><span class="glyphicon glyphicon-filter"></span> Filter</button>
                </div>
            </div>


            <table class="table">
                <thead>
                    <tr class="filters" style="al">
                        <th>
                            @*@Html.DisplayNameFor(model => model.Title) Title*@ Title
                           
                        </th>
                        <th>
                            @*@Html.DisplayNameFor(model => model.Price) Price*@ Price
                     
                        </th>
                        <th>
                            @*@Html.DisplayNameFor(model => model.Description) Description*@ Description
                           
                        </th>
                        <th>
                            @*@Html.DisplayNameFor(model => model.PagesCount) PagesCount*@ PageCount
                     
                        </th>

                        <th>
                            @*@Html.DisplayNameFor(model => model.Author.FullName) FullName*@ Author
                        </th>
                        <th>
                            @*@Html.DisplayNameFor(model => model.CountryPublished.CountryName) CountryName*@ Country
                        </th>
                        <th>
                            Picture
                        </th>
                    </tr>
                </thead>
                <tbody class="text-center">
                    @foreach (var item in Model)
                    {

                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Title)

                            </td>
                            <td>
                                @{  decimal totalPrice = item.Price;
                                    totalPrice += item.CountryPublished.PhoneCode;
                                }
                                @Html.DisplayFor(modelItem => totalPrice) $

                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Description)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PagesCount)
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => item.Author.FullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CountryPublished.CountryName)
                            </td>
                            <td>
                                @{
                                    foreach (var v in item.ImagePatchs)
                                    {
                                        <img src="~/Images/@v.ImageUrl" style="height:100px;width:80px;" />
                                    }

                                }
                            </td>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                            </td>
                        </tr>
           }
                </tbody>
            </table>
            </div>
        </div>
    </div>

            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

            @Html.PagedListPager(Model, page => Url.Action("Index",
    new { page }))



<script type="text/javascript">
        $(document).ready(function () {
            $('.filterable .btn-filter').click(function () {
                var $panel = $(this).parents('.filterable'),
                $filters = $panel.find('.filters input'),
                $tbody = $panel.find('.table tbody');
                if ($filters.prop('disabled') == true) {
                    $filters.prop('disabled', false);
                    $filters.first().focus();
                } else {
                    $filters.val('').prop('disabled', true);
                    $tbody.find('.no-result').remove();
                    $tbody.find('tr').show();
                }
            });

            $('.filterable .filters input').keyup(function (e) {
                /* Ignore tab key */
                var code = e.keyCode || e.which;
                if (code == '9') return;
                /* Useful DOM data and selectors */
                var $input = $(this),
                inputContent = $input.val().toLowerCase(),
                $panel = $input.parents('.filterable'),
                column = $panel.find('.filters th').index($input.parents('th')),
                $table = $panel.find('.table'),
                $rows = $table.find('tbody tr');
                /* Dirtiest filter function ever ;) */
                var $filteredRows = $rows.filter(function () {
                    var value = $(this).find('td').eq(column).text().toLowerCase();
                    return value.indexOf(inputContent) === -1;
                });
                /* Clean previous no-result if exist */
                $table.find('tbody .no-result').remove();
                /* Show all rows, hide filtered ones (never do that outside of a demo ! xD) */
                $rows.show();
                $filteredRows.hide();
                /* Prepend no-result row if all rows are filtered */
                if ($filteredRows.length === $rows.length) {
                    $table.find('tbody').prepend($('<tr class="no-result text-center"><td colspan="' + $table.find('.filters th').length + '">No result found</td></tr>'));
                }
            });
        });

</script>



@section scripts
{
    <style>
        .filterable {
    margin-top: 15px;
}
.filterable .panel-heading .pull-right {
    margin-top: -20px;
}
.filterable .filters input[disabled] {
    background-color: transparent;
    border: none;
    cursor: auto;
    box-shadow: none;
    padding: 0;
    height: auto;
}
.filterable .filters input[disabled]::-webkit-input-placeholder {
    color: #333;
}
.filterable .filters input[disabled]::-moz-placeholder {
    color: #333;
}
.filterable .filters input[disabled]:-ms-input-placeholder {
    color: #333;
}
    </style>
   
  }










































            @*<script>
                    var app = angular.module('myApp', []);
                    app.controller('myCtrl', function ($scope, BooksService) {

                        getTabledata();
                        function getTabledata() {
                            BooksService.getData().then(function (d) {
                                $scope.search = {};
                                $scope.searchBy = '$';

                                $scope.BooksList = d.data;

                            })
                        }
                    });

                    app.service("BooksService", function ($http) {
                        this.getData = function () {
                            return $http.get("/Admin/GetRecords");
                        }
                    });
                </script>*@
